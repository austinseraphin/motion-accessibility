end
container=Container.alloc.init
container.accessibility_element_count
container.accessibilityElementCount
view=UIView.alloc.init
view.isAccessibilityElement
view.accessibilityElement?
view.accessibilityElement?=1
view.isAccessibilityElement=true
view.setIsAccessibilityElement=true
view.isAccessibilityElement=true
view=UIView.alloc.init
view.accessibility_element=false
class Test < UIView
define accessibility_element?
true
end
end
test=Test.alloc.init
test.accessibility_element?
class Test < UIView
def
accessibility_element?
true
end
end
test=Test.alloc.init
test.accessibility_label?
test.accessibility_element?
class Accessibility
alias :post_notification :UIAccessibilityPostNotification
end
UIAccessibilityPostNotification("hi")
:voiceover.accessibility_notification
:voiceover.accessibility_notification
UIAccessibilityVoiceOverChangedNotification
UIAccessibilityVoiceOverStatusChanged
Accessibility.post_notification(:layout)
Accessibility.post_notification(:layout_changed)
a
Accessibility.post_notification(:layout_changed, "Hello")
accessibilityPerformEscape
Accessibility.perform_escape
true||raise "hi"
:up.accessibility_scroll_direction
:up.accessibility_scroll_direction
Accessibility.scroll(:up)
class Test < UIView
def accessibility_element_did_lose_focus
puts "Deet!"
true
end
end
test=Test.alloc.init
test.accessibilityElementDidLoseFocus
UIAccessibilityAnnouncementKeyStringValue
true||"hi"
false||(raise "hi")
true||(raise "hi")
:button.accessibility_attribute
:button.accessibility_trait
:announcement_did_finish.accessibility_zoom_type
:announcement_did_finish.accessibility_zoom_type
:announcement_key_string_value.accessibility_zoom_type
view=UIView.alloc.init
view.accessibility_identifier
view.accessibilityIdentifier
view.accessibilityIdentifier="test"
view.accessibility_identifier
view=UIView.alloc.init
view.setAccessibilityIdentifier("Test")
view.accessibilityIdentifier
class Test < UIView
def accessibility_identifier
"Hail Eris"
end
end
test=Test.alloc.init
test.accessibilityIdentifier
view=View.new
view=UIView.new
Accessibility::Content_Pag
Accessibility::Content_Page
Accessibility::Page_Content
class Test < UIView
def accessibility_page_content
"Hail Eris!"
end
end
test=Test.new
test.accessibilityPageContent
test.accessibilityPageContent="hi"
:test:
view=UIView.new
view.accessibility_element?
view=UIView.alloc.init
view.performMagicTap
class Test < UIView
def accessibility_traits
:button.accessibility_trait
end
end
test=Test.new
test.accessibility_trait
test.accessibility_traits
test.accessibility_traits=:image.accessibility_trait
test.super
Test.super
Test.superclass
test.accessibilityTraits=:image.accessibility_trait
test.accessibility_traits=:image.accessibility_trait
a=AccessibilityElement.new
UIView.alloc.init.accessibilityElement
AccessibilityElement
a=UIAccessibilityElement.new
container=UIAccessibilityContainer.new
view=UIView.new
a=UIAccessibilty.new(view)
a=UIAccessibilityElement.new(view)
a=UIAccessibilityElement.alloc.initWithContainer(view)
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(view)
a
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(view)
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView)
a(UIView)
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a=Accessibility.new(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a.class
a.accessibilityLabel
a.accessibility_label
UIAccessibility.new(UIView.new)
UIAccessibilityElement.new(UIView.new)
a=Accessibility::Element.new(UIView.new)
a=Accessibility::Element.init_with_container(UIView.new)
a0=UIAccessibilityElement.alloc.initWithContainer(self)
a0=UIAccessibilityElement.alloc.initWithContainer(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.accessibilityLabel
a0.accessibility_label
a0.accessibility_label
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.accessibility_label
a0
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.accessibilityLabel
a0.label
a0.hint
Accessibility::Element_Attributes
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.accessibilityLabel="hi"
a0.accessibilityLabel
a0.label
a=Accessibility::Element.new(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a=Accessibility::Element.new(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.label="Hi"
Accessibility::Element_Attributes
Accessibility::Element_Attributes
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.label="Hi"
a=Accessibility::Element.new
a=Accessibility::Element.new(UIView.new)
a.label
a.accessibilityLabel
a.label="Hal Eris"
a.label="Hal Eris"
class Test < Accessibility::Element
def label
"All hail Discordia!"
end
end
test=Test.new
class Test
end
test=Test.new(UIView.new)
test.label
a=Accessibility::Element.new(UIView.new)
a.accessibility_element_is_focused
a=Accessibility::Element.new(UIView.new)
a.focused?
Accessibility::Focus
a.accessibilityElementIsFocused
a.focused?
a.is_focused
a.is_focused=true
a.accessibilityElementIsFocused
a.accessibilityElementIsFocused=true
a.accessibilityElementDidBecomeFocused
a.accessibilityElementDidBecomeFocused="Hail Eris"
class Accessibility::Element
alias :focused? :accessibilityElementDidBecomeFocused
end
a.focused?
Accessibility::Element
Accessibility::Element.new
a=Accessibility::Element.new(UIView.new)
class UIAccessibility
alias :focused? :accessibilityElementDidBecomeFocused
end
a.focused?
a.accessibilityElementDidBecomeFocused
a.did_become_focused
a=Accessibility::Element.new(UIView.new)
a.focused?
Accessibility::Focus
Accessibility::Element_Attributes
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityDidBecomeFocused")
}
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityDidBecomeFocused"})
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityElementDidBecomeFocused"})
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityElementDidBecomeFocused"}
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityElementIsFocused"}
a.focused?
class Weird < Accessibility::Element
def focused?
puts "HAhahahahahahahahahahahahahaha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "Hahahaha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "Hahahaha"
true
end
end
h={a: 1, b: 2}
h>delete_if {|k,v| v==2}
h.delete_if {|k,v| v==2}
h
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
weird=Weird.new
weird=Weird.new(UIView.new)
weird.focused?
weird.accessibilityElementIsFocused
view=UIView.new
view.accessibility_label="hi"
view.accessibilityLabel
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
weird=Weird.new(UIView.new)
weird.focused?
weird.accessibilityElementIsFocused
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
weird=Weird.new(UIView.new)
weird.focused?
weird.accessibility_element_is_focused
weird.is_focused
class Weird < Accessibility::Element
def focused?
true
end
end
:header.accessibility_trait
UIView.new.accessibility_perform_magic_tap
Accessibility::Element.new(UIView.new).accessibilityPerformMagicTap
UIView.new.accessibilityPerformMagicTap
UIView.new.accessibility_perform_magic_tap
nav=UINavigationController.new
nav.viewController
nav.rootViewController
nav.viewController
nav
nav.accessibilityLabel
nav.accessibilityPerformMagicTap
nav.accessibilityHint
nav.accessibilityFrame
nav.accessibility_element?
nav.isAccessibilityElement
o=NSObject.new
o.accessibility_label="Hail Eris"
Object
def test
true
end
accessibility_label
accessibility_label="Hail Eris"
def accessibility_label
"Boom!"
end
accessibilityLabel
self.accessibility_label
picker=UIPickerview.new
picker=UIPickerView.new
picker.accessibilityLabel
picker.accessibility_label
self.accessibilityElement
self.accessibilityElementIsFocused
self.accessibility_element_is_focused
self.accessibility_element_is_focused
a=Accessibility::Element.new(UIView.new)
a.focused?
a.accessibility_element_focused?
self.accessibility_view_is_modal
:layout_changed.accessibility_notification
:layout_changed.accessibility_notification.class
:announcement.accessibility_notification
:inverted_color.accessibility_notification
:inverted_colors.accessibility_notification
:inverted_colors
:inverted_colors.accessibility_notification
:invert_colors.accessibility_notification
:invert_colors.accessibility_notification.class
Accessibility.post_notification(:invert_colors)
Accessibility.post_notification(:invert_colors,"Hi")
Accessibility.post_notification(:invert_colors,"Hi")
Accessibility.post_notification(:invert_colors,"Hi")
Accessibility.post_notification(:invert_colors,"Hi")
Accessibility.post_notificatiom(:voiceover)
Accessibility.post_notification(:voiceover)
Accessibility.post_notification(:layout_changed)
Accessibility.post_notification(:layout_changed,"Hello")
class NSObject
alias :label :setAccessibilityLabel
end
UIAccessibilityPostNotification.class
Accessibility.invert_colors_enabled?
Accessibility.invert_coors_enabled?
Accessibility.invert_colors_enabled?
Accessibility.invert_colors_enabled?
UIAccessibilityInvertColorsEnabled
UIAccessibilityInvertColorsEnabled()
:invert_colors.accessibility_notification
Accessibility.invert_colors_enabled?
UIAccessibility.isInvertColorsEnabled
UIAccessibility
UIAccessibility
UIAccessibility.isInvertColorsEnabled
UIAccessibilityPostNotification
UIAccessibilityInvertColorsEnabled(true)
Accessibility.invert_colors_enabled?
Accessibility.invert_colors_enabled?
Accessibility.invert_colors_is_enabled
Accessibility::Status
Accessibility::Status
Accessibility.voiceover_running?
Accessibility.voiceover_running?
Accessibility.voiceover_running?
self.send(:UIAccessibilityIsVoiceOverRunning)
UIAccessibibilityIsVoiceOverRunning
UIAccessibibilityIsVoiceOverRunning()
UIAccessibilityIsVoiceOverRunning()
()
Accessibility.voiceover_running?
Accessibility.voiceover_running?
Accessibility.voiceover_running?
Accessibility.voiceover_running?
Accessibility.closed_captioning?enabled?
Accessibility.closed_captioning_enabled?
view=UIView.new
view.accessibility_element_at_index
view.accessibility_element_at_index(1)
view.accessibility_element_at_index(1)
view=UIView.new
view.accessibility_element_at_index(1)
Accessibility.post_notification(:screen_changed, "Hi!")
Accessibility::PickerView_Attributes
Accessibility::PickerView_Attributes.flatten
%r{"test".to_sym}
name
name="Test"
%r{name.to_sym}
Regex
Regexp
Regexp.new("test")
Regexp.new(test.to_sym)
attr=Accessibility::PickerView_Attributes.flatten
attr.grep(/:test/)
attr
attr.grep(/:accessibility_label_for_component)
attr.grep(/:accessibility_label_for_component/)
attr.contains?
attr.member?
attr.member?(:test)
attr.member?(:accessibility_hint_for_component)
Accessibility::Browser.views
Accessibility::Browser
module Accessibility
module Browser
end
end
Accessibility
Accessibility::Traits
Accessibility::Browser
Accessibility::Browser
Accessibility::Browser
Accessibility::Browser.views
Accessibility::Browser.views
Accessibility::Browser.views
UIApplication.sharedApplication
app=UIApplication.sharedApplication
app.keyWindow
window=app.keyWindow
window.subviews
window.subviews
Accessibility::Browser.views
Accessibility::Browser.views
Accessibility::Browser.views
view=Accessibility::Browser.views
view
view=view.first
view.subviews
view.class
Accessibility::Browser.views
view=Accessibility::Browser.views.first
view.subviews
view
label=view.subviews.first
label.parentView
label.parent
label.superView
label.superview
label.superview.accessibility_element?
label.accessibility_element?
Accessibility::Browser.views
Accessibility::Browser.views.first.accessibility_element?
Accessibility::Browser.views.first.accessibility_element?
Accessibility::Browser.views.first.accessibility_element?
Accessibility::Browser.views
view=Accessibility::Browser.views
view.grep {|subview| subview.accessibility_element?}
view.map {|subview| subview.accessibility_element?}
view.subviews.map {|subview| subview.accessibility_element?}
view=view.first
view.subviews.map {|subview| subview.accessibility_element?}
view.subviews
view.subviews.map {|v| v.accessibility_element?}.include(true)
view.subviews.map {|v| v.accessibility_element?}.include?(true)
view.map {|v| v.accessibility_element?}.include?(true)
view.superview.map {|v| v.accessibility_element?}.include?(true)
view.superview.subviews.map {|v| v.accessibility_element?}.include?(true)
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
views=Accessibility::Data[:views]
views=Accessibility::Data[:subviews]
Accessibility::Browser.browse
views=Accessibility::Browser::Data[:views]
views[0].accessibility_element?
views[1].accessibility_element?
views[2].accessibility_element?
views[0].accessibility_element?
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Element.new.is_accessibility_element?
Accessibility::Element.new(UIView.new).is_accessibility_element?
Accessibility::Element.new(UIView.new).is_accessibility_element
Accessibility::Element.new(UIView.new).accessibility_element?
UIView.new.accessibility_element?
UIView.new.is_accessibility_element
Accessibility::Element.new(UIView.new).accessibility_element?
Accessibility::Element.new(UIView.new).is_accessibility_element
Accessibility::Browser.browse
Accessibility::Browser.browse
Accessibility::Browser.browse
include Accessibility::Browser
browse
Accessibility::Browser.browse
Accessibility::Browser.view
Accessibility::Browser.view 1
Accessibility::Browser.view 1
Accessibility::Browser.view 1
include Accessibility::Browser
Accessibility::Browser.view 1
include Browser::Accessibility
include Accessibility::Browser
browse
Data
view 1
Accessibility::Browser::Data
Data
Data[:views].length
include Browser::Accessibility
include Accessibility::Browser
browse
view 1
1.class
include Accessibility::Browser
view 1
include Accessibility::Browser
view 1
include Accessibility::Browser
view 1
view 1
include Accessibility::Browser
view 1
view
view.text
Data[:view]
Accessibility::Browser::Data[:view]
self.class
Data.class
view 'update'
view 3
v.accessibility_element?
view.accessibility_element?
view.accessibility_raits
view.accessibility_traits
browse
view.text
view.text="Testing"
browse
view 2
view.title
view
view.setTitle("Testing weirdo",forState: UIControlStateNormal)
browes
browse
views
include Accessibility::Browser
views
view 'update'
Data[:views]
include Accessibility::Browser
view 'update'
[].empty?
view 'update'
include Accessibility::Browser
view 'update'
include Accessibility::Browser
views
view 'update'
Data[:view]
include Accessibility::Browser
view 'update'
view
view 1
view.text="Will I ever get a date?"
view update
view "update"
view "date"
view "will"
view.text
view.text
include Accessibility::Browser
view 1
view.text="Will I ever get a date?"
view "date"
view "update"
view
view "will"
view
view.text
views
tap
tap {puts "hi"}
touch
view=UIView.new
view.tap
view.touch
view
view "upd"
views
view
view 2
view.superclass
UIButton.new
UIButton.new.buttonType
UIButton.new.buttonType=1
view.triggerForControlEvents
a.triggerActionsForEvent
a.triggerActionsForEvents
UIView.new.origin
view=UIView.alloc.initWithFrame(CGRect.new([0,0],[100,100]))
view.origin
view.accessibility_activation_point
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
Accessibility::Attributes.values
begin
UIView.new.origin
rescue
puts "Hey!"
else
puts "Ok here."
end
def test
UIView.new.origin
rescue
puts "Uh ohh banana time!"
end
end
test
5.times {test}
def test
UIView.new.origin
rescue
puts "Oh no"
end
5.times {|n| puts "#{n}. #{test}"}
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
view=UIView.new
view.should_group_accessibility_children
Accessibility::Attribute_Types
:button.accessibility_trait.class
:button.accessibility_trait.class
UIView.new.accessibility_label.accessibility_attribute_type
UIView.new.accessibility_label.accessibility_attribute_type
Accessibility.attribute_type(:accessibilityLabel)
Accessibility.attribute_type(:accessibilityLabel)
UIView.new.accessibilityTraits
UIView.new.accessibility_traits
view=UIView.new
view.accessibility_element?
view.should_group_accessibility_children
Accessibility.attribute_type(:shouldGroupAccessibilityChildren)
Accessibility.attribute_type(:shouldGroupAccessibilityChildren)
view=UIView.new
view.should_group_accessibility_children
view.accessibility_hint
view=UIView.new
view.inspect_accessibility
UIView.new.origin
CGPoint
CGPoint.new
CGPoint.new
CGPoint.new.origin
UIView.new.origin
UIView.new.origin
CGPoint.new.origin
UIView.new.inspect_accessibility
UIView.new.inspect_accessibility
UIView.new.accessibility_activation_point
UIView.new.accessibility_activation_point=CGRect.new
view=UIView.new
view.accessibilityActivationPoint
view=UIView.alloc.initWithFrame(CGRect.new([0,0],[100,100]))
view.accessibilityActivationPoint
view.accessibilityActivationPoint=CGPoint.new(10,10)
CGPoint.new(10,10)
view=UIView.new
view.origin
CGPoint
UIView.new.inspect)a11y
UIView.new.inspect_a11y
rake
UIView.new.inspect_a11y
ios="accessibilityViewIsModal"
name=ios.gsub(/([A-Z]+)([A-Z][a-z])/,'\1 \2')
ios
ios.gsub(/([A-Z]+[a-z]+)/,'\1')
ios.gsub(/(.)([A-Z])/,'\1 \2')
UIView.new.inspect_a11y
UIView.new.inspect_a11y
UIView.new.inspect_a11y
UIView.new.inspect_a11y
UIView.new.inspect_a11y
UIView.new.inspect_a11y
self.class
self.class
UIView.new.inspect_a11y
:none.accessibility_trait
5&0
4&0
3&0
0&0
1&1
view=UIView.new
view.inspect_a11y
view=UIView.new
view.accessibilityScroll
UIView.new.inspect_a11y
self.respond_to(:accessibilityScroll)
self.respond_to?(:accessibilityScroll)
self.respond_to?(:accessibility_scroll)
UIView.new.inspect_a11y
Accessibility::Defined_Attributes
Accessibility::Defined_Attributes
UIView.new.inspect_a11y
UIView.new.inspect_a11y
view=UIView.new
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Deet deet Dee! Magic mushrooms!"
end
end
view=MagicView.new
view.inspect_a11y
view.inspect_a11y
view=UIView.new
view.inspect_a11y
view=UIView.new
view.inspect_a11y
class MagicView < UIView
def perform_magic_tap
puts "Magic Mushrooms!"
end
end
view=MagicView.new
view.inspect_a11y
class MagicView
def accessibility_perform_magic_tap
puts "Magic Mushrooms!"
end
end
view.inspect_a11y
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Magic Mushrooms"
end
end
view=MagicView.new
view.inspect_a11y
h={:a=>1}
h<<{:b=>2}
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Magic Mushrooms!"
end
end
Accessibility::Defined_Attributes
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Magic Mushrooms!"
end
Accessibility::Defined_Attributes
end
self.class
class Test
puts self.class
end
class Test
puts self.class
end
class Test
def test
puts self.class
end
end
Test.new.test
class Test
def self.test
puts self.class
end
end
Test.test
class Test
class << self
puts self.class
end
end
view.class.name
UIView.new.class.name
class Test
puts self.class.name
end
class Test
class << self
puts self.class
end
end
defined?
self.respond_to(accessibilityScroll)
self.respond_to?(:accessibilityScroll)
self.defined?(:accessibilityScroll)
class Object
Test="Koosh"
end
end
Koosh
class Test
puts Koosh
end
self::Koosh
class Test
def test
puts Koosh
end
end
Test.new.test
Test.new
class Object
Attributes=[]
end
class Test
def test
Attributes<<rand(23)
puts Attributes
end
end
Test.new.test
Test.new.test
view=UIView.new
view.inspect_a11y
view=UIView.new
view.inspect_a11y
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Magic Mushrooms!"
end
end
magic=MagicView.new
magic.inspect_a11y
Defined_Accessibility_Attributes
@test
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Mushrooms"
end
end
@accessibility_attributes
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Mushrooms"
end
end
@accessibility_attributes
magic=MagicView.new
magic.instance_variable_get("@accessibility_attributes")
magic.inspect_a11y
UIView.new.inspect_a11y
class NSObject
@@test=23
end
@@test
class Test
class << self
def test
puts self.class
end
end
end
Test.new.test
Test.test
alias :A11y :Accessibility
class<<self
alias :A11y :Accessibility
end
class << self
alias :A11y :Accessibility
end
A11y
alias :A11y :Accessibility
Accessibility::Defined_Attributes
def MagicView
def accessibility_perform_magic_tap
puts "Magic Mushroom"
end
end
Accessibility::Defined_Attributes
class MagicView < UIView
def accessibility_perform_magic_tap
puts "Magic Mushroom"
end
end
class MagicView < UIView
def accessibility_perform_magic_tap
"mushroom"
end
end
Accessibility::Defined_Attributes
magic=MagicView.new
magic.inspect_a11y
ob
Accessibility::Traits
view=UIView.new
view.inspect_accessibility_traits
view=UIView.new
view.inspect_accessibility_traits
view=UIView.new
view.inspect_accessibility_traits
view.accessibility_traits=:button.accessibility_trait
view.inspect_accessibility_traits
view.accessibility_traits=[:image, :link]
view.inspect_accessibility_traits
view.accessibility_traits
6&2
view=UIView.new
view.accessibility_traits=[:image, :link]
view.accessibility_traits
view.inspect_accessibility_traits
view.inspect_a11y
view=UIView.new
view.accessibility_traits=[:image, :link]
view.inspect_a11y
A11y=Accessibility
A11y
A11y::Attributes
A11y