undefine_method
method_undef
view=UIView.alloc.init
def accessibilityLabel
"hello"
end
view.accessibility_label
def accessibility_label
"Hail Eris"
end
view.accessibilityLabel
view=UIView.alloc.init
view.accessibilityLabel
def accessibility_label
"hi"
end
view.accessibilityLabel
class Test < UIView
def accessibilityLabel
"Hail Eris"
end
end
view=Test.alloc.init
view.accessibilityLabel
class Test < UIView
def accessibilityLabel
"Hail Eris"
end
end
view=Test.alloc.init
view.accessibilityLabel
class Test<UIView
def accessibilityLabel
"Hail Eris"
end
end
view=Test.alloc.init
view.accessibilityLabel
view.accessibility-label
view.accessibility_label
class Test
def accessibility_label
"All hail Discordia"
end
end
test.accessibility_label
class Test < UIView
def accessibility_label
"Hail Eris"
end
end
view=Test.alloc.init
test.accessibility_label
test.accessibilityLabel
view=UIView.alloc.init
test.accessibilityLabel
test
view=Test.alloc.init
view.accessibility_label
view.accessibilityLabel
class Test
def accessibilityLabel
"All hail Discordia"
end
end
view.accessibilityLabel
view.accessibility_label
view.responds_to?(accessibilityLabel)
view.respond_to?(accessibilityLabel)
view.respond_to?(:accessibilityLabel)
class Test
def deet
"Deet"
end
end
class Test < UIView
def accessibility_label
"Hi"
end
end
alias :method_added :method_added_accessibility
view=UIView.alloc.init
view.accessibilityLabel="Hail Eris"
view.accessibility_label
view.accessibility_label="All hail Discordia"
view.accessibilityLabel
view=UIView.alloc.init
view.accessibility_label="test"
class Test<UIView
def accessibility_traits
:button.accessibility_trait
end
end
view.accessibility_traits
view=Test.alloc.init
view.accessibility_traits
view.accessibilityTraits
classs Picker < UIPickerView
UIPickerView
class Picker < UIPickerView
def accessibility_label_for_component(component)
"Hail Eris"
end
end
class Picker < UIPickerView
def accessibility_label_for_component(component)
"Hail Eris"
end
end
picker=Picker.alloc.init
picker.accessibility_label_for_component(0)
picker.accessibilityLabelForComponent(0)
picker.accessibilityLabelForComponent
picker.accessibilityLabelForComponent(0)
class Picker < UIPickerView
def accessibility_label_for_component(c)
"Hail #{c}"
end
end
picker=Picker.alloc.init
picker.accessibility_label
picker.accessibility_label_for_component(0)
picker.accessibilityLabelForComponent(0)
view=UIView.alloc.init
view.accessibilityElements=[1,2,3]
view.instance_methods|grep(/accessibility/)
view.public_methods|grep(/accessibility/)
view.public_methods.grep(/accessibility/)
view=UIView.alloc.init
class Container < UIView
def accessibility_element_count
23
end
end
[1,2,3]+[4,5]
class Container < UIView
def accessibility_element_count
23
end
end
Hash.combine
Hash.merge
{a: 1}.merge {b: 2}
{a: 1}.merge({b: 2})
{{a:1}{b:2}}
{{a: 1}, {b: 2}}
Accessibility.all_attributes
Accessibility.all_attributes
Accessibility.all_attributes
Accessibility::Attributes
all=Hash.new
all.merge(Accessibility::Attributes)
all
all.merge!(Accessibility::Attributes)
all
Accessibility.all_attributes
alias :A11y :Accessibility
Accessibility.all_attributes
class Container < UIView
def accessibility_element_count
23
end
end
container=Container.alloc.init
container.accessibility_element_count
container.accessibilityElementCount
view=UIView.alloc.init
view.isAccessibilityElement
view.accessibilityElement?
view.accessibilityElement?=1
view.isAccessibilityElement=true
view.setIsAccessibilityElement=true
view.isAccessibilityElement=true
view=UIView.alloc.init
view.accessibility_element=false
class Test < UIView
define accessibility_element?
true
end
end
test=Test.alloc.init
test.accessibility_element?
class Test < UIView
def
accessibility_element?
true
end
end
test=Test.alloc.init
test.accessibility_label?
test.accessibility_element?
class Accessibility
alias :post_notification :UIAccessibilityPostNotification
end
UIAccessibilityPostNotification("hi")
:voiceover.accessibility_notification
:voiceover.accessibility_notification
UIAccessibilityVoiceOverChangedNotification
UIAccessibilityVoiceOverStatusChanged
Accessibility.post_notification(:layout)
Accessibility.post_notification(:layout_changed)
a
Accessibility.post_notification(:layout_changed, "Hello")
accessibilityPerformEscape
Accessibility.perform_escape
true||raise "hi"
:up.accessibility_scroll_direction
:up.accessibility_scroll_direction
Accessibility.scroll(:up)
class Test < UIView
def accessibility_element_did_lose_focus
puts "Deet!"
true
end
end
test=Test.alloc.init
test.accessibilityElementDidLoseFocus
UIAccessibilityAnnouncementKeyStringValue
true||"hi"
false||(raise "hi")
true||(raise "hi")
:button.accessibility_attribute
:button.accessibility_trait
:announcement_did_finish.accessibility_zoom_type
:announcement_did_finish.accessibility_zoom_type
:announcement_key_string_value.accessibility_zoom_type
view=UIView.alloc.init
view.accessibility_identifier
view.accessibilityIdentifier
view.accessibilityIdentifier="test"
view.accessibility_identifier
view=UIView.alloc.init
view.setAccessibilityIdentifier("Test")
view.accessibilityIdentifier
class Test < UIView
def accessibility_identifier
"Hail Eris"
end
end
test=Test.alloc.init
test.accessibilityIdentifier
view=View.new
view=UIView.new
Accessibility::Content_Pag
Accessibility::Content_Page
Accessibility::Page_Content
class Test < UIView
def accessibility_page_content
"Hail Eris!"
end
end
test=Test.new
test.accessibilityPageContent
test.accessibilityPageContent="hi"
:test:
view=UIView.new
view.accessibility_element?
view=UIView.alloc.init
view.performMagicTap
class Test < UIView
def accessibility_traits
:button.accessibility_trait
end
end
test=Test.new
test.accessibility_trait
test.accessibility_traits
test.accessibility_traits=:image.accessibility_trait
test.super
Test.super
Test.superclass
test.accessibilityTraits=:image.accessibility_trait
test.accessibility_traits=:image.accessibility_trait
a=AccessibilityElement.new
UIView.alloc.init.accessibilityElement
AccessibilityElement
a=UIAccessibilityElement.new
container=UIAccessibilityContainer.new
view=UIView.new
a=UIAccessibilty.new(view)
a=UIAccessibilityElement.new(view)
a=UIAccessibilityElement.alloc.initWithContainer(view)
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(view)
a
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(view)
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView)
a(UIView)
a=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a=Accessibility.new(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a.class
a.accessibilityLabel
a.accessibility_label
UIAccessibility.new(UIView.new)
UIAccessibilityElement.new(UIView.new)
a=Accessibility::Element.new(UIView.new)
a=Accessibility::Element.init_with_container(UIView.new)
a0=UIAccessibilityElement.alloc.initWithContainer(self)
a0=UIAccessibilityElement.alloc.initWithContainer(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.accessibilityLabel
a0.accessibility_label
a0.accessibility_label
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.accessibility_label
a0
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.accessibilityLabel
a0.label
a0.hint
Accessibility::Element_Attributes
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.accessibilityLabel="hi"
a0.accessibilityLabel
a0.label
a=Accessibility::Element.new(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a=Accessibility::Element.new(UIView.new)
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.label="Hi"
Accessibility::Element_Attributes
Accessibility::Element_Attributes
a0=UIAccessibilityElement.alloc.initWithAccessibilityContainer(UIView.new)
a0.label
a0.label="Hi"
a=Accessibility::Element.new
a=Accessibility::Element.new(UIView.new)
a.label
a.accessibilityLabel
a.label="Hal Eris"
a.label="Hal Eris"
class Test < Accessibility::Element
def label
"All hail Discordia!"
end
end
test=Test.new
class Test
end
test=Test.new(UIView.new)
test.label
a=Accessibility::Element.new(UIView.new)
a.accessibility_element_is_focused
a=Accessibility::Element.new(UIView.new)
a.focused?
Accessibility::Focus
a.accessibilityElementIsFocused
a.focused?
a.is_focused
a.is_focused=true
a.accessibilityElementIsFocused
a.accessibilityElementIsFocused=true
a.accessibilityElementDidBecomeFocused
a.accessibilityElementDidBecomeFocused="Hail Eris"
class Accessibility::Element
alias :focused? :accessibilityElementDidBecomeFocused
end
a.focused?
Accessibility::Element
Accessibility::Element.new
a=Accessibility::Element.new(UIView.new)
class UIAccessibility
alias :focused? :accessibilityElementDidBecomeFocused
end
a.focused?
a.accessibilityElementDidBecomeFocused
a.did_become_focused
a=Accessibility::Element.new(UIView.new)
a.focused?
Accessibility::Focus
Accessibility::Element_Attributes
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityDidBecomeFocused")
}
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityDidBecomeFocused"})
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityElementDidBecomeFocused"})
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityElementDidBecomeFocused"}
Accessibility::Element_Attributes.delete_if {|ruby,ios| ios=="accessibilityElementIsFocused"}
a.focused?
class Weird < Accessibility::Element
def focused?
puts "HAhahahahahahahahahahahahahaha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "Hahahaha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "Hahahaha"
true
end
end
h={a: 1, b: 2}
h>delete_if {|k,v| v==2}
h.delete_if {|k,v| v==2}
h
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
weird=Weird.new
weird=Weird.new(UIView.new)
weird.focused?
weird.accessibilityElementIsFocused
view=UIView.new
view.accessibility_label="hi"
view.accessibilityLabel
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
weird=Weird.new(UIView.new)
weird.focused?
weird.accessibilityElementIsFocused
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
class Weird < Accessibility::Element
def focused?
puts "haha"
true
end
end
weird=Weird.new(UIView.new)
weird.focused?
weird.accessibility_element_is_focused
weird.is_focused
class Weird < Accessibility::Element
def focused?
true
end
end
:header.accessibility_trait
UIView.new.accessibility_perform_magic_tap
Accessibility::Element.new(UIView.new).accessibilityPerformMagicTap
UIView.new.accessibilityPerformMagicTap
UIView.new.accessibility_perform_magic_tap
nav=UINavigationController.new
nav.viewController
nav.rootViewController
nav.viewController
nav
nav.accessibilityLabel
nav.accessibilityPerformMagicTap
nav.accessibilityHint
nav.accessibilityFrame
nav.accessibility_element?
nav.isAccessibilityElement
o=NSObject.new
o.accessibility_label="Hail Eris"
Object
def test
true
end
accessibility_label
accessibility_label="Hail Eris"
def accessibility_label
"Boom!"
end
accessibilityLabel