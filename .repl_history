view.accessibility_traits
view=UIView.alloc.init
view.accessibility_traits=:image
view.accessibility_traits
view.accessibility_traits=[:image,:link]
view.accessibility_traits
view=UIView.alloc.init
view.accessibilityLabel="Hail Eris"
view.accessibility_label
def accessibilityLabel
"Hail Eris! #{rand(10)}"
end
view.accessibilityLabel
view.accessibilityLabel
public
def accessibilityLabel
"Hail Eris! 23"
end
view.accessibilityLabel
view=UIView.alloc.init
view.accessibility_label="Hi"
view.accessibility_label
view.accessibilityLabel
Hash.instance_methods
Hash.instance_methods|grep /each/}
view=UIView.alloc.init
UIView::Accessibility_Attributes
UIView::Accessibility_Attributes.grep(/label/)
UIView::Accessibility_Attributes.grep(puts $_)
UIView::Accessibility_Attributes.flatten.grep(/label/)
UIView::Accessibility_Attributes.flatten
UIView::Accessibility_Attributes.flatten.grep(/label/i)
UIView::Accessibility_Attributes.flatten.grep('test')
UIView::Accessibility_Attributes.flatten.grep('label')
%r{a}
UIView::Accessibility_Attributes.rassoc("accessibilityLabel")
UIView::Accessibility_Attributes.rassoc(:accessibilityLabel)
undef_method
undefine_method
method_undef
view=UIView.alloc.init
def accessibilityLabel
"hello"
end
view.accessibility_label
def accessibility_label
"Hail Eris"
end
view.accessibilityLabel
view=UIView.alloc.init
view.accessibilityLabel
def accessibility_label
"hi"
end
view.accessibilityLabel
class Test < UIView
def accessibilityLabel
"Hail Eris"
end
end
view=Test.alloc.init
view.accessibilityLabel
class Test < UIView
def accessibilityLabel
"Hail Eris"
end
end
view=Test.alloc.init
view.accessibilityLabel
class Test<UIView
def accessibilityLabel
"Hail Eris"
end
end
view=Test.alloc.init
view.accessibilityLabel
view.accessibility-label
view.accessibility_label
class Test
def accessibility_label
"All hail Discordia"
end
end
test.accessibility_label
class Test < UIView
def accessibility_label
"Hail Eris"
end
end
view=Test.alloc.init
test.accessibility_label
test.accessibilityLabel
view=UIView.alloc.init
test.accessibilityLabel
test
view=Test.alloc.init
view.accessibility_label
view.accessibilityLabel
class Test
def accessibilityLabel
"All hail Discordia"
end
end
view.accessibilityLabel
view.accessibility_label
view.responds_to?(accessibilityLabel)
view.respond_to?(accessibilityLabel)
view.respond_to?(:accessibilityLabel)
class Test
def deet
"Deet"
end
end
class Test < UIView
def accessibility_label
"Hi"
end
end
alias :method_added :method_added_accessibility
view=UIView.alloc.init
view.accessibilityLabel="Hail Eris"
view.accessibility_label
view.accessibility_label="All hail Discordia"
view.accessibilityLabel
view=UIView.alloc.init
view.accessibility_label="test"
class Test<UIView
def accessibility_traits
:button.accessibility_trait
end
end
view.accessibility_traits
view=Test.alloc.init
view.accessibility_traits
view.accessibilityTraits
classs Picker < UIPickerView
UIPickerView
class Picker < UIPickerView
def accessibility_label_for_component(component)
"Hail Eris"
end
end
class Picker < UIPickerView
def accessibility_label_for_component(component)
"Hail Eris"
end
end
picker=Picker.alloc.init
picker.accessibility_label_for_component(0)
picker.accessibilityLabelForComponent(0)
picker.accessibilityLabelForComponent
picker.accessibilityLabelForComponent(0)
class Picker < UIPickerView
def accessibility_label_for_component(c)
"Hail #{c}"
end
end
picker=Picker.alloc.init
picker.accessibility_label
picker.accessibility_label_for_component(0)
picker.accessibilityLabelForComponent(0)
view=UIView.alloc.init
view.accessibilityElements=[1,2,3]
view.instance_methods|grep(/accessibility/)
view.public_methods|grep(/accessibility/)
view.public_methods.grep(/accessibility/)
view=UIView.alloc.init
class Container < UIView
def accessibility_element_count
23
end
end
[1,2,3]+[4,5]
class Container < UIView
def accessibility_element_count
23
end
end
Hash.combine
Hash.merge
{a: 1}.merge {b: 2}
{a: 1}.merge({b: 2})
{{a:1}{b:2}}
{{a: 1}, {b: 2}}
Accessibility.all_attributes
Accessibility.all_attributes
Accessibility.all_attributes
Accessibility::Attributes
all=Hash.new
all.merge(Accessibility::Attributes)
all
all.merge!(Accessibility::Attributes)
all
Accessibility.all_attributes
alias :A11y :Accessibility
Accessibility.all_attributes
class Container < UIView
def accessibility_element_count
23
end
end
container=Container.alloc.init
container.accessibility_element_count
container.accessibilityElementCount
view=UIView.alloc.init
view.isAccessibilityElement
view.accessibilityElement?
view.accessibilityElement?=1
view.isAccessibilityElement=true
view.setIsAccessibilityElement=true
view.isAccessibilityElement=true
view=UIView.alloc.init
view.accessibility_element=false
class Test < UIView
define accessibility_element?
true
end
end
test=Test.alloc.init
test.accessibility_element?
class Test < UIView
def
accessibility_element?
true
end
end
test=Test.alloc.init
test.accessibility_label?
test.accessibility_element?
class Accessibility
alias :post_notification :UIAccessibilityPostNotification
end
UIAccessibilityPostNotification("hi")
:voiceover.accessibility_notification
:voiceover.accessibility_notification
UIAccessibilityVoiceOverChangedNotification
UIAccessibilityVoiceOverStatusChanged
Accessibility.post_notification(:layout)
Accessibility.post_notification(:layout_changed)
a
Accessibility.post_notification(:layout_changed, "Hello")
accessibilityPerformEscape
Accessibility.perform_escape
true||raise "hi"
:up.accessibility_scroll_direction
:up.accessibility_scroll_direction
Accessibility.scroll(:up)
class Test < UIView
def accessibility_element_did_lose_focus
puts "Deet!"
true
end
end
test=Test.alloc.init
test.accessibilityElementDidLoseFocus
UIAccessibilityAnnouncementKeyStringValue
true||"hi"
false||(raise "hi")
true||(raise "hi")
:button.accessibility_attribute
:button.accessibility_trait
:announcement_did_finish.accessibility_zoom_type
:announcement_did_finish.accessibility_zoom_type
:announcement_key_string_value.accessibility_zoom_type
view=UIView.alloc.init
view.accessibility_identifier
view.accessibilityIdentifier
view.accessibilityIdentifier="test"
view.accessibility_identifier
view=UIView.alloc.init
view.setAccessibilityIdentifier("Test")
view.accessibilityIdentifier
class Test < UIView
def accessibility_identifier
"Hail Eris"
end
end
test=Test.alloc.init
test.accessibilityIdentifier
view=View.new
view=UIView.new
Accessibility::Content_Pag
Accessibility::Content_Page
Accessibility::Page_Content
class Test < UIView
def accessibility_page_content
"Hail Eris!"
end
end
test=Test.new
test.accessibilityPageContent
test.accessibilityPageContent="hi"
:test: